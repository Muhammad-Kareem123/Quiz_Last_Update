// <auto-generated />
using System;
using Exam_Api_v2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Exam_Api_v2.Migrations
{
    [DbContext(typeof(AppDB_Context))]
    partial class AppDB_ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Exam_Api_v2.Models.Account", b =>
                {
                    b.Property<int>("Account_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Account_ID"));

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password_Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role_ID")
                        .HasColumnType("int");

                    b.Property<int>("Status_ID")
                        .HasColumnType("int");

                    b.HasKey("Account_ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NationalId")
                        .IsUnique();

                    b.HasIndex("Role_ID");

                    b.HasIndex("Status_ID");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Exam", b =>
                {
                    b.Property<int>("Exam_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Exam_ID"));

                    b.Property<int>("Account_ID")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exam_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Exam_ID");

                    b.HasIndex("Account_ID");

                    b.ToTable("exams");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Exam_QuestionBank", b =>
                {
                    b.Property<int>("Exam_QB_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Exam_QB_ID"));

                    b.Property<int>("Account_ID")
                        .HasColumnType("int");

                    b.Property<int>("Exam_ID")
                        .HasColumnType("int");

                    b.Property<decimal>("Mark")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Question_Bank_ID")
                        .HasColumnType("int");

                    b.HasKey("Exam_QB_ID");

                    b.HasIndex("Account_ID");

                    b.HasIndex("Exam_ID");

                    b.HasIndex("Question_Bank_ID");

                    b.ToTable("exam_QuestionBanks");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Fill_In_Gaps", b =>
                {
                    b.Property<int>("Gap_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Gap_ID"));

                    b.Property<string>("Correct_Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gap_Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Question_Bank_ID")
                        .HasColumnType("int");

                    b.HasKey("Gap_ID");

                    b.HasIndex("Question_Bank_ID");

                    b.ToTable("fill_In_Gaps");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Login", b =>
                {
                    b.Property<int>("Login_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Login_ID"));

                    b.Property<int>("Account_ID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password_Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status_ID")
                        .HasColumnType("int");

                    b.HasKey("Login_ID");

                    b.HasIndex("Account_ID");

                    b.HasIndex("Status_ID");

                    b.ToTable("logins");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.MCQ_Options", b =>
                {
                    b.Property<int>("Option_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Option_ID"));

                    b.Property<bool>("Is_Correct")
                        .HasColumnType("bit");

                    b.Property<string>("Option_Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Option_ID");

                    b.ToTable("mCQ_Options");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.QuestionType", b =>
                {
                    b.Property<int>("Question_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Question_Type_ID"));

                    b.Property<decimal>("Mark")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("QuestionType_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question_Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Question_Type_ID");

                    b.ToTable("questionTypes");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Question_Bank", b =>
                {
                    b.Property<int>("Question_Bank_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Question_Bank_ID"));

                    b.Property<int>("Account_ID")
                        .HasColumnType("int");

                    b.Property<string>("Correct_Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Mark")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Option_ID")
                        .HasColumnType("int");

                    b.Property<int>("OptionsOption_ID")
                        .HasColumnType("int");

                    b.Property<string>("Question_Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Question_Type_ID")
                        .HasColumnType("int");

                    b.HasKey("Question_Bank_ID");

                    b.HasIndex("Account_ID");

                    b.HasIndex("Option_ID");

                    b.HasIndex("OptionsOption_ID");

                    b.HasIndex("Question_Type_ID");

                    b.ToTable("questionBanks");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Roles", b =>
                {
                    b.Property<int>("Role_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Role_ID"));

                    b.Property<string>("Business_Entity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Order_Num")
                        .HasColumnType("int");

                    b.Property<string>("Role_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Role_ID");

                    b.HasIndex("Role_Name")
                        .IsUnique();

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Status", b =>
                {
                    b.Property<int>("Status_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Status_ID"));

                    b.Property<string>("Business_Entity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Order_Num")
                        .HasColumnType("int");

                    b.Property<string>("Status_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Status_ID");

                    b.ToTable("statuses");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Student_ExamQB", b =>
                {
                    b.Property<int>("Student_QB")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Student_QB"));

                    b.Property<int>("Account_ID")
                        .HasColumnType("int");

                    b.Property<int>("Exam_QB_ID")
                        .HasColumnType("int");

                    b.Property<string>("StudentAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Student_QB");

                    b.HasIndex("Account_ID");

                    b.HasIndex("Exam_QB_ID");

                    b.ToTable("student_ExamQBs");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.TrueOrFalse", b =>
                {
                    b.Property<int>("Question_Bank_ID")
                        .HasColumnType("int");

                    b.Property<bool>("Correct_Ans")
                        .HasColumnType("bit");

                    b.HasKey("Question_Bank_ID");

                    b.ToTable("trueOrFalses");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Account", b =>
                {
                    b.HasOne("Exam_Api_v2.Models.Roles", "Roles")
                        .WithMany("Accounts")
                        .HasForeignKey("Role_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Exam_Api_v2.Models.Status", "Status")
                        .WithMany("Accounts")
                        .HasForeignKey("Status_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Exam", b =>
                {
                    b.HasOne("Exam_Api_v2.Models.Account", "Teacher")
                        .WithMany("Exams")
                        .HasForeignKey("Account_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Exam_QuestionBank", b =>
                {
                    b.HasOne("Exam_Api_v2.Models.Account", "Teacher")
                        .WithMany("Exam_QuestionBanks")
                        .HasForeignKey("Account_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Exam_Api_v2.Models.Exam", "Exam")
                        .WithMany("Exam_QuestionBanks")
                        .HasForeignKey("Exam_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Exam_Api_v2.Models.Question_Bank", "Question_Bank")
                        .WithMany("Exam_QuestionBanks")
                        .HasForeignKey("Question_Bank_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Question_Bank");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Fill_In_Gaps", b =>
                {
                    b.HasOne("Exam_Api_v2.Models.Question_Bank", "Question_Bank")
                        .WithMany("Fill_In_Gaps")
                        .HasForeignKey("Question_Bank_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question_Bank");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Login", b =>
                {
                    b.HasOne("Exam_Api_v2.Models.Account", "Account")
                        .WithMany("Logins")
                        .HasForeignKey("Account_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Exam_Api_v2.Models.Status", "Status")
                        .WithMany("Logins")
                        .HasForeignKey("Status_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Question_Bank", b =>
                {
                    b.HasOne("Exam_Api_v2.Models.Account", "Teacher")
                        .WithMany("Question_Banks")
                        .HasForeignKey("Account_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Exam_Api_v2.Models.MCQ_Options", "MCQ")
                        .WithMany("Question_Banks")
                        .HasForeignKey("Option_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Exam_Api_v2.Models.MCQ_Options", "Options")
                        .WithMany()
                        .HasForeignKey("OptionsOption_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Api_v2.Models.QuestionType", "QuestionType")
                        .WithMany("Question_Banks")
                        .HasForeignKey("Question_Type_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MCQ");

                    b.Navigation("Options");

                    b.Navigation("QuestionType");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Student_ExamQB", b =>
                {
                    b.HasOne("Exam_Api_v2.Models.Account", "Student")
                        .WithMany("student_ExamQBs")
                        .HasForeignKey("Account_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Exam_Api_v2.Models.Exam_QuestionBank", "Exam_QuestionBank")
                        .WithMany("student_ExamQBs")
                        .HasForeignKey("Exam_QB_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam_QuestionBank");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.TrueOrFalse", b =>
                {
                    b.HasOne("Exam_Api_v2.Models.Question_Bank", "Question_Bank")
                        .WithOne("TrueOrFalse")
                        .HasForeignKey("Exam_Api_v2.Models.TrueOrFalse", "Question_Bank_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question_Bank");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Account", b =>
                {
                    b.Navigation("Exam_QuestionBanks");

                    b.Navigation("Exams");

                    b.Navigation("Logins");

                    b.Navigation("Question_Banks");

                    b.Navigation("student_ExamQBs");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Exam", b =>
                {
                    b.Navigation("Exam_QuestionBanks");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Exam_QuestionBank", b =>
                {
                    b.Navigation("student_ExamQBs");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.MCQ_Options", b =>
                {
                    b.Navigation("Question_Banks");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.QuestionType", b =>
                {
                    b.Navigation("Question_Banks");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Question_Bank", b =>
                {
                    b.Navigation("Exam_QuestionBanks");

                    b.Navigation("Fill_In_Gaps");

                    b.Navigation("TrueOrFalse")
                        .IsRequired();
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Roles", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Exam_Api_v2.Models.Status", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Logins");
                });
#pragma warning restore 612, 618
        }
    }
}
